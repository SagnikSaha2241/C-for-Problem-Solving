#include <stdio.h>
#include <string.h>

#define SIZE 100

char stack[SIZE];
int top = -1;

void push(char c) { stack[++top] = c; }
char pop() { return stack[top--]; }
int isEmpty() { return top == -1; }

int precedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}

int isOperand(char c) {
    return (c >= '0' && c <= '9');
}

int isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/' || c == '^');
}

void infixToPostfix(char infix[], char postfix[]) {
    int i, j = 0;
    char c;
    top = -1;
    for (i = 0; infix[i] != '\0'; i++) {
        c = infix[i];
        if (isOperand(c)) postfix[j++] = c;
        else if (c == '(') push(c);
        else if (c == ')') {
            while (!isEmpty() && stack[top] != '(') postfix[j++] = pop();
            pop();
        } else if (isOperator(c)) {
            while (!isEmpty() && precedence(stack[top]) >= precedence(c)) postfix[j++] = pop();
            push(c);
        }
    }
    while (!isEmpty()) postfix[j++] = pop();
    postfix[j] = '\0';
}

void postfixToInfix(char postfix[], char infix[]) {
    char stackStr[SIZE][SIZE], temp[SIZE], op1[SIZE], op2[SIZE];
    int strTop = -1, i;
    for (i = 0; postfix[i] != '\0'; i++) {
        char c = postfix[i];
        if (isOperand(c)) {
            char str[2] = {c, '\0'};
            strcpy(stackStr[++strTop], str);
        } else if (isOperator(c)) {
            strcpy(op2, stackStr[strTop--]);
            strcpy(op1, stackStr[strTop--]);
            sprintf(temp, "(%s%c%s)", op1, c, op2);
            strcpy(stackStr[++strTop], temp);
        }
    }
    strcpy(infix, stackStr[strTop]);
}

int main() {
    char infix[SIZE], postfix[SIZE];
    scanf("%s", infix);
    infixToPostfix(infix, postfix);
    printf("%s\n", postfix);
    scanf("%s", postfix);
    postfixToInfix(postfix, infix);
    printf("%s\n", infix);
    return 0;
}
